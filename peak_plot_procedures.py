from scipy.stats import gaussian_kde
import os
import numpy as np
import matplotlib.pyplot as plt
import math as mt
from sklearn.neighbors.kde import KernelDensity
from enum import Enum

def plot_biplot(x, y, x_label, y_label, file_name):
    plt.figure(44, figsize=(6, 6))
    lims = (min(min(x), min(y)), max(max(x), max(y)))
    d = lims[1] - lims[0]
    lims_ext = (lims[0] - 0.05 * d, lims[1] + 0.05 * d)
    plt.plot(x, y, 'o')
    plt.plot(lims_ext, lims_ext, 'k')
    plt.text(lims[0], lims[1], 'N+: '+str(sum(y >= x)), horizontalalignment='left', verticalalignment='top')
    plt.text(lims[1], lims[0], 'N-: '+str(sum(y < x)), horizontalalignment='right', verticalalignment='bottom')
    plt.xlim(lims_ext)
    plt.ylim(lims_ext)
    plt.xlabel(x_label)
    plt.ylabel(y_label)
    plt.savefig(file_name)
    plt.close()


# plt.figure(1, figsize=(12, 5))
# plt.plot(indexRange, forecast_error(fc_def), indexRange, forecast_error(s1), indexRange, forecast_error(s2), indexRange, forecast_error(s3))
# plt.legend(['Ensemble', 'Hiromb', 'Swan', 'No-Swan'])
# plt.title('Simple ensemble MAE')
# plt.xlabel('Forecast index')
# plt.ylabel('Forecast MAE, cm')
# plt.xlim([0, N])
# plt.savefig('pics\\simple-ensemble-mae-' + level_scale_flag_string + 't-scale-pl' + str(pLevel).zfill(3) + '.png')
# plt.close()

# plt.figure(1, figsize=(12, 5))
# plt.plot(indexRange, forecast_wmae(fc_def, pLevel), indexRange, forecast_wmae(s1, pLevel), indexRange, forecast_wmae(s2, pLevel), indexRange, forecast_wmae(s3, pLevel))
# plt.legend(['Ensemble', 'Hiromb', 'Swan', 'No-Swan'])
# plt.title('Ensemble WMAE')
# plt.xlabel('Forecast index')
# plt.ylabel('WMAE (' + str(pLevel) + ' cm), cm')
# plt.xlim([0, N])
# plt.savefig('pics\\simple-ensemble-wmae-' + level_scale_flag_string + 't-scale-pl' + str(pLevel).zfill(3) + '.png')
# plt.close()

# plt.figure(1, figsize=(12, 5))
# plt.plot(indexRange, forecast_error(fc_def), indexRange, forecast_error(fc_1))
# plt.legend(['Ensemble def', 'Ensemble #1'])
# plt.title('Simple ensemble MAE')
# plt.xlabel('Forecast index')
# plt.ylabel('Forecast MAE, cm')
# plt.xlim([0, N - 1])
# plt.savefig('pics\\ensemble-1-mae-' + level_scale_flag_string + 't-scale-pl' + str(pLevel).zfill(3) + '.png')
# plt.close()

# plt.figure(1, figsize=(12, 5))
# plt.plot(indexRange, forecast_wmae(fc_def, pLevel), indexRange, forecast_wmae(fc_1, pLevel))
# plt.legend(['Ensemble def', 'Ensemble #1'])
# plt.title('Ensemble WMAE')
# plt.xlabel('Forecast index')
# plt.ylabel('WMAE (' + str(pLevel) + ' cm), cm')
# plt.xlim([0, N - 1])
# plt.savefig('pics\\ensemble-1-wmae-' + level_scale_flag_string + 't-scale-pl' + str(pLevel).zfill(3) + '.png')
# plt.close()

# plt.figure(1, figsize=(12, 5))
# plt.plot(indexRange, fc_def_err[0], 'o-')
# plt.plot(indexRange, fc_1_err[0], 'o-')
# plt.legend(['Ensemble def', 'Ensemble #1'])
# plt.xlabel('Forecast index')
# plt.ylabel('Peak time error, h')
# plt.xlim([0, N - 1])
# plt.savefig('pics\\ensemble-1-pet-' + level_scale_flag_string + 't-scale-pl' + str(pLevel).zfill(3) + '.png')
# plt.close()

# plt.figure(1, figsize=(12, 5))
# plt.plot(indexRange, fc_def_err[1], 'o-')
# plt.plot(indexRange, fc_1_err[1], 'o-')
# plt.legend(['Ensemble def', 'Ensemble #1'])
# plt.xlabel('Forecast index')
# plt.ylabel('Peak level error, cm')
# plt.xlim([0, N - 1])
# plt.savefig('pics\\ensemble-1-pel-' + level_scale_flag_string + 't-scale-pl' + str(pLevel).zfill(3) + '.png')
# plt.close()

# plt.figure(1, figsize=(8, 6))
# nan_filter = ~np.isnan(fc_def_err[1]) & ~np.isnan(fc_1_err[1])
# lim = [-30, 30]
# x = np.linspace(lim[0], lim[1], 100)
# plt.hist(fc_def_err[1][nan_filter], histtype='step', normed=True, color='b')
# kde = KernelDensity(kernel='gaussian', bandwidth=2).fit(np.array(fc_def_err[1][nan_filter]).reshape(-1, 1))
# plt.plot(x, np.exp(kde.score_samples(x.reshape(-1, 1))), linewidth=2, color='b')
# plt.hist(fc_1_err[1][nan_filter], histtype='step', normed=True, color='r')
# kde = KernelDensity(kernel='gaussian', bandwidth=2).fit(np.array(fc_1_err[1][nan_filter]).reshape(-1, 1))
# plt.plot(x, np.exp(kde.score_samples(x.reshape(-1, 1))), linewidth=2, color='r')
# plt.legend(['Ensemble def', 'Ensemble #1'])
# plt.xlabel('Peak level error, cm')
# plt.ylabel('PDF')
# plt.savefig('pics\\ensemble-1-pel-pdf-' + level_scale_flag_string + 't-scale-pl' + str(pLevel).zfill(3) + '.png')
# plt.close()

# plt.figure(1, figsize=(8, 6))
# nan_filter = ~np.isnan(fc_def_err[0]) & ~np.isnan(fc_1_err[0])
# print('Error def (T, L): ')
# print(np.mean(fc_def_err[:, nan_filter], axis=1))
# print('Error 1 (T, L): ')
# print(np.mean(fc_1_err[:, nan_filter], axis=1))
# lim = [-10, 10]
# gkde = gaussian_kde(fc_def_err[0][nan_filter])
# x = np.linspace(lim[0], lim[1], 100)
# plt.hist(fc_def_err[0][nan_filter], histtype='step', normed=True, color='b')
# kde = KernelDensity(kernel='gaussian', bandwidth=0.5).fit(np.array(fc_def_err[0][nan_filter]).reshape(-1, 1))
# plt.plot(x, np.exp(kde.score_samples(x.reshape(-1, 1))), linewidth=2, color='b')
# plt.hist(fc_1_err[0][nan_filter], histtype='step', normed=True, color='r')
# kde = KernelDensity(kernel='gaussian', bandwidth=0.5).fit(np.array(fc_1_err[0][nan_filter]).reshape(-1, 1))
# plt.plot(x, np.exp(kde.score_samples(x.reshape(-1, 1))), linewidth=2, color='r')
# plt.legend(['Ensemble def', 'Ensemble #1'])
# plt.xlabel('Peak time error, h')
# plt.ylabel('PDF')
# plt.savefig('pics\\ensemble-1-pet-pdf-' + level_scale_flag_string + 't-scale-pl' + str(pLevel).zfill(3) + '.png')
# plt.close()
